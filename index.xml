<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>日々のChengeLog</title><link>https://ozw-sei.github.io/</link><description>Recent content on 日々のChengeLog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>©{year}, All Rights Reserved</copyright><lastBuildDate>Sun, 23 Feb 2020 22:06:17 +0900</lastBuildDate><atom:link href="https://ozw-sei.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Pythonのデータクラスをdictionaryからデシリアライズする書き方</title><link>https://ozw-sei.github.io/posts/python-dataclass-from-dictionary/</link><pubDate>Sun, 23 Feb 2020 22:06:17 +0900</pubDate><guid>https://ozw-sei.github.io/posts/python-dataclass-from-dictionary/</guid><description>Pythonのデータクラスをdictionaryからデシリアライズする書き方 同僚のコードレビューをしていたえときにレスポンスのdictをそのまま使っていたのだけど、 「短いコードだから辞書のままで良くない？class書くのボイラープレート多いし」と心の声が聞こえたので覚書。
Python3.7以降ならば動作するはず。
キーが足りないと動かないので注意
from dataclasses import dataclass @dataclass class Person: name: str home_town: str age: int source_dict = { &amp;quot;name&amp;quot;: &amp;quot;Mother Fxxer&amp;quot;, &amp;quot;home_town&amp;quot;: &amp;quot;Kick Ass&amp;quot;, &amp;quot;age&amp;quot;: 16 } # 普通に作る normal = Person(&amp;quot;Mother Fxxer&amp;quot;, &amp;quot;Kick Ass&amp;quot;, 16) # 辞書から作る from_dict = Person(**source_dict) print(normal == from_dict) ## おまけ # キーが足りない場合 source_dict = { } from_dict = Person(**source_dict) # Traceback (most recent call last): # File &amp;quot;qr_Z3i1cj&amp;quot;, line 27, in &amp;lt;module&amp;gt; # from_dict = Person(**source_dict) # TypeError: __init__() missing 3 required positional arguments: 'name', 'home_town', and 'age'</description></item><item><title>電子書籍の管理にGooglePlayBooksを使い始めた</title><link>https://ozw-sei.github.io/posts/started_using_googleplaybooks/</link><pubDate>Sun, 23 Feb 2020 20:50:47 +0900</pubDate><guid>https://ozw-sei.github.io/posts/started_using_googleplaybooks/</guid><description>電子書籍の管理に困っていた、具体的にはKindleで販売していない本だ。
例えば技術書展で購入した本やOreilly公式、技評Plublishingなど。
元々はOneDriveに入れて管理してたんだけど、モバイルで読んだ時にどこまで読んだか履歴の管理ができなかったり、PDFを探すのが億劫で買うだけで積ん読が増える一方だった。
GooglePlayBooksは自前の100MB以下のPDFをアップロードすることができて、モバイルでもブラウザでも開くことができる。
https://play.google.com/books
KindleのようにPC用のクライアントを必要としない所も評価が上がる（というか、Kindleより大分使いやすくないか？）
運用して1週間経過したくらいだけど、自宅でも職場でもモバイルでもストレス無く本を読むことができて満足している。
不満は強いて言えば文字検索ができないことくらい？（これは必要になったらPDF開いて検索すれば良いだろう）
とりあえず、使い続けてみる。</description></item><item><title>title</title><link>https://ozw-sei.github.io/about/</link><pubDate>Sun, 23 Feb 2020 20:18:24 +0900</pubDate><guid>https://ozw-sei.github.io/about/</guid><description>自己紹介 後で書く
seijiro4751@gmail.com
Qiita Twitter Github</description></item><item><title>yasnippetのTemplateの中でElispの結果を使用したい</title><link>https://ozw-sei.github.io/posts/yasnippet-insert-current-data/</link><pubDate>Sun, 23 Feb 2020 19:07:31 +0900</pubDate><guid>https://ozw-sei.github.io/posts/yasnippet-insert-current-data/</guid><description>Hugoのヘッダー情報の日付にiso8601でDateTimeを追加するものを書いてみた。
yasnippetのスニッペット展開時に日付を一緒に挿入してほしかったのだけど、snippet中でelispの評価ができるのかがわからなかったのだけど、 ` で囲むとできるらしい。
便利
--- title: ${1:title} date: `(concat (format-time-string &amp;quot;%Y-%m-%dT%T&amp;quot;) ((lambda (x) (concat (substring x 0 3) &amp;quot;:&amp;quot; (substring x 3 5))) (format-time-string &amp;quot;%z&amp;quot;)))` draft: true --- $0 参考
Embedded Emacs-lisp code</description></item><item><title>HelloHugo</title><link>https://ozw-sei.github.io/posts/hello/</link><pubDate>Sun, 23 Feb 2020 16:16:27 +0900</pubDate><guid>https://ozw-sei.github.io/posts/hello/</guid><description>こんにちは。Hugo はてなブログにログインするためにFirefoxのCookieの設定をいじるのがアホくさくなったのと、 管理ページがおもすぎて使い物にならなかったので流行のHugoに移行しました。
おまけでgithub-actionでsource ブランチにpushすると自動でpublishするようにしました。
参考記事(Thank you!) 公式 Getting-Startd GitHub Actions による GitHub Pages への自動デプロイ</description></item></channel></rss>