<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>日々のChangeLog</title><link>https://ozw-sei.github.io/</link><description>Recent content on 日々のChangeLog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><copyright>©{year}, All Rights Reserved</copyright><lastBuildDate>Tue, 24 Feb 2099 15:07:39 +0900</lastBuildDate><atom:link href="https://ozw-sei.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>About TIL</title><link>https://ozw-sei.github.io/about_til/</link><pubDate>Tue, 24 Feb 2099 15:07:39 +0900</pubDate><guid>https://ozw-sei.github.io/about_til/</guid><description>元同僚が Githubのリポジトリ「TIL」を使って小さなアウトプットを習慣化する に影響を受けたのを真似し始めた。
元々Evernoteとかでメモ取る習慣あったんだけど、はてなブログやQiita開くと他人の投稿に気が散ってしまうのでアウトプットにならず死蔵されていた。
Hugo みたくGithubで管理できるならば、検索も簡単なのでえいやで初めてしまった。
同僚への説明資料とかが含まれるかもしれんけど、それはご愛嬌</description></item><item><title>いつも使う python の pre-commit</title><link>https://ozw-sei.github.io/posts/2021-05-14-180124/</link><pubDate>Fri, 14 May 2021 18:01:40 +0900</pubDate><guid>https://ozw-sei.github.io/posts/2021-05-14-180124/</guid><description>ほぼ、自分用のメモ書き.
autoflake8 -&amp;gt; flake8の自動フォーマットツールなんだけど、ここでは未使用の変数とか自動で削除するために使ってる.
black -&amp;gt; 自動フォーマット
isort -&amp;gt; 自動でimportのsort
docformatter -&amp;gt; python のdocstring のフォーマット
あとはプロジェクトによっては mypy を食わせている.
repos: - repo: https://github.com/myint/autoflake rev: d43d8a770c0f9ef2f68b368670ab882f6ca6ea03 hooks: - id: autoflake args: - --in-place - --remove-unused-variables - --remove-all-unused-imports - --expand-star-imports - repo: https://github.com/psf/black rev: 20.8b1 hooks: - id: black args: [--line-length, &amp;quot;99&amp;quot;] language_version: python3.8.1 - repo: https://github.com/asottile/seed-isort-config rev: v1.9.1 hooks: - id: seed-isort-config - repo: https://github.com/pre-commit/mirrors-isort rev: '7d231f6641ae1fbec126004f363cc1ed3761d8d5' hooks: - id: isort - repo: https://github.</description></item><item><title>キーボード買った</title><link>https://ozw-sei.github.io/posts/2021-05-14-175149/</link><pubDate>Fri, 14 May 2021 17:52:01 +0900</pubDate><guid>https://ozw-sei.github.io/posts/2021-05-14-175149/</guid><description>ゲーミングキーボードを買った。
Logicool G ロジクール G ゲーミングキーボード テンキーレス ワイヤレス G913 TKL 薄型 GLスイッチ クリッキー 日本語配列
https://gaming.logicool.co.jp/ja-jp/products/gaming-keyboards/g913-tkl-wireless.html
開発ではKinesis使ってたのだけど、ゲームのときだけパッドを使ってた。 なんとなく、ワイヤレスにしたかったのとキーボードの方が動かしやすいゲーム多いのでこっちにした。 超快適</description></item><item><title>config</title><link>https://ozw-sei.github.io/posts/2020-11-15-141716/</link><pubDate>Sun, 15 Nov 2020 14:17:57 +0900</pubDate><guid>https://ozw-sei.github.io/posts/2020-11-15-141716/</guid><description>Emacsの設定をみなおしたぞ！</description></item><item><title>久々</title><link>https://ozw-sei.github.io/posts/return/</link><pubDate>Wed, 21 Oct 2020 10:40:43 +0900</pubDate><guid>https://ozw-sei.github.io/posts/return/</guid><description>きちんと更新する！</description></item><item><title>init-loader 再訪</title><link>https://ozw-sei.github.io/posts/init-loader/</link><pubDate>Wed, 11 Mar 2020 10:59:49 +0900</pubDate><guid>https://ozw-sei.github.io/posts/init-loader/</guid><description>一度捨てた init-loader をもう一度使うことにした。 元々、init-loader を捨てた理由はたかが設定でファイルを分割するメリットに納得できなかったから。 読みづらいとか言っても、C-sで探せば関係ないとか考えてました。
ただし、改めて init.el を見直したときに気が付かずに重複した設定を書いていることが散見され、 また括弧の数とかでエラーが出たときにどこで問題が起きたのかがとても分かりづらい状態になっていました。
どうしようか考えたところ、やはりファイル分割が適当と思いました。 またinit-loader はエラーが発生した際にどのファイルでエラーが起きたかが起動ログで表示してくれるのでinit.elのデバッグがとてもやりやすくなった。
しばらくはコレで行く。</description></item><item><title>買い物2020年2月</title><link>https://ozw-sei.github.io/posts/purchase_2020_02/</link><pubDate>Tue, 10 Mar 2020 00:10:37 +0900</pubDate><guid>https://ozw-sei.github.io/posts/purchase_2020_02/</guid><description>お買い物を記録することは比較的好きである。 どの本か忘れたけど、価値観の願望を最も表現する消費はお金の消費と言われていてなるほどと。 時間を消費するためには準備や強い意思が必要だけど、お金は持ってるものを消費するだけで良いので願望が現れやすい。
論文とか読んだわけではないが体感的にはかなり納得感あり。
Corsair HARPOON RGB WIRELESS ゲーミングマウス MS358 CH-9311011-AP
元々かぶせ持ち用のマウスを使ってたのだけど、普段はつかみ持ちかつまみ持ちしてるので乗り換えた。 シンプルに疲れにくくなった。
リアルタイムレンダリング
鈍器。すぐ読めないけど、こういう本はすぐ絶版になるので買えるうちに買っておく。
フロムヘル
アラン・ムーア信者
散髪 茶髪にしてみた。
シュタインズゲート
PC版。最後にやったのが360で2010年の2月頃だったと思う。
10年ぶりの再訪だったので胸焼けしそうな描写が幾つもあった。
まぁ、感想は他の人が散々書いてると思うので、「エルプサイ・コングルゥ」で締めますｗ
（おでん缶とか10年前のネットスラングや懐かしのラジ館が出てきて胸焼けするような思いでした）
しかし、ダルは2017年には結婚していて子供を生むんですね。。。
明快3次元コンピュータープログラミング 昔買ったはずなんだけど、紛失したえので買い戻した。 困った時にいつもこの本に立ち返ってる気がする。
ストレッチ 少ないリソースで思わぬ成果を出す方法 積んでる。すごく読みたい。 制約がある方が成果を出しやすいことは体感的にはわかっているんだけど、それを真面目に解説してくれてるっぽい。</description></item><item><title>近況報告 2020年2月</title><link>https://ozw-sei.github.io/posts/recently_report_2020_02/</link><pubDate>Mon, 09 Mar 2020 23:34:42 +0900</pubDate><guid>https://ozw-sei.github.io/posts/recently_report_2020_02/</guid><description>今更だけど2月の近況報告
主なできごと Oculus Rift S がぶっ壊れた 開発用のおもちゃがぶっ壊れた。HalfLifeまでに新しいHMD買わないと&amp;hellip;
hugoにブログを乗り換えた. Emacsでかける喜び。
スタンディングデスク復帰した。 元々使ってたけど、無職期間中使わないでいたら習慣がSTOPしてしまった。
仕事 PixiJS, WebGL(プレーン) Angular NodeJS(Express, Lambda) Python(Serverless) DynamoDB, PostgreSQL Solidityとか Emacs org-modeでメモ取り始めた. idoからcounselにスイッチした flyspell-correct (コレ。革命的ですねwww) restclient.el を使い始めた 新しく取り組んだ Amazon ECS ServerlessFramework GithubActions 次取り組みたいこと BlockChainゲーム作る 折角仕事で1年半Daapsを開発したので、今度はオリジナルのゲームを作りたい。 ライトなAutoChessのクローンでも作ろうかな！ 技術的には馴染みのあるPixiJSとか思ったんだけど、あえてUnityとLoomSDKで作るのもアリかと思ってきた。 実は少し手を動かして形にはなっているのだけど、どうせ二度目は早いし同じこと何度もやってもつまらないので eos とUnityにしようかなー。 迷う。 VRとかも絡めやすそうで良いですね。 ブログの改善 スクショ貼ったほうが良いんだろうが、Hugoでやるのめんどくさくない？ 画像やAmazonやTwitterのリンクとか。 みんなどうやってるんだろう。。。
あと、スマホで表示した時にテーマが見ずらい。。。(自分で改造した部分なんだが&amp;hellip;)</description></item><item><title>時間を浪費しすぎないために使っているツール</title><link>https://ozw-sei.github.io/posts/habit/</link><pubDate>Mon, 02 Mar 2020 00:10:00 +0900</pubDate><guid>https://ozw-sei.github.io/posts/habit/</guid><description>自分はとても怠惰な人間なので、誘惑があるとすぐに怠ける。 時間を浪費しすぎないために様々なツールで内なる獣に躾をしている。
基本的にややりたくないことをやるハードルを上げて、やるべきことを行うハードルを下げることがミッション。
つまり、無駄なネットサーフィン、無駄にスマホアプリを減らして、読書やプログラミングする時間を増やしたいｗ
RescueTime 何より何に時間を使っているか把握するところから。 https://www.rescuetime.com/ 自分の場合はTwitterをだらだら見たりモバイルで必要以上にネットサーフィンをしている傾向があった。 そこまでわかって、じゃあどうやって防ぐねん。って話は次の段。 ちなみに原因がわかれば自分でなんとかできるってマッチョな人はこれだけでOKかと。
これを週1回振り返りで細かい改善する。 大掛かりな見直しやツールの導入は月初のみに決めている（そうしないと気がついたらツールに時間を使われすぎてしまうので）。
Freedom これはいわゆるWebサイトブロッカー. 特徴はVPNを介するので例えばTwitterを登録しておくと、TwitterアプリもSafariのTwitter,FirefoxのTwitterもアクセスできなくなる。 クロスプラットフォームで動作するし、Android版はアプリの起動もブロックすることができるのでかなり抑制力が強い。 自分はこれくらいしないと時間の浪費が改善しなかった。
その他 スマホの充電器をトイレに設置する。 電源があって、一番長時間滞在しずらく頻繁にアクセスしない場所がここだった。 衛生面は氣になるので他に良い場所があったら教えてくれ。
やるべきことをやるために Outliner じゃあ、時間を節約した分何をするかって話になると思いますが、自分の場合は書籍を読む、Udemyのコンテンツを消化する、プログラムを書く、ペットと戯れる、週末はゲームを遊ぶ。 これらの行動を物理的に実行可能な作業で区切って管理していく。 ちなみに明らかに家のPCで行う作業や新しくなにか考える時はEmacsのOrg-modeで管理（少し前まではDropboxPaper）。 他の作業（日常的な雑多な作業）はTodoistで管理してる。 いわゆるGTDのプロジェクトはアウトライナーでタスクがTodoistみたいな？
Google PlayBooks 最近導入した。 元々Kindleで電子書籍を読んでいたのだけど、kindleのクライアントのDLが遅いし起動するのが面倒臭いのでブラウザで動くGooglePlayBooksに乗り換えた（スマホでも動くし）。 RescueTimeを見ると明らかに電子書籍を読んでいる時間が増えた。 やるべき行動を取るまでのハードルを下げることの威力を感じている。
PomodoroTimer 適当なタイマーでタスクがポモドーロ幾つで完了したかを記帳していく。 日々、こなせるポモドーロが増えてポイントやベロシティが上がっていくのが楽しい。
Google カレンダー 当たり前だけどあえて。 シンプルで視覚化しやすいのでなんだかんだ最強かも。
スタンディングデスク 椅子はストレスがなさすぎて眠くなる。 1時間半くらいは立って作業できる。 かなり手応えを感じるし腰の悩みが減った。</description></item><item><title>Oculus Rift S が買えなくなってる</title><link>https://ozw-sei.github.io/posts/purchase_oculus_rift_s/</link><pubDate>Wed, 26 Feb 2020 23:49:28 +0900</pubDate><guid>https://ozw-sei.github.io/posts/purchase_oculus_rift_s/</guid><description>気がついたのは日曜日だけど、公式　からOculus Rift Sが購入できなくなった。
丁度、DisplayPortの調子が悪いので買い換えようと思ったらKONOZAMAだった。
コロナウイルスの影響だろうか。</description></item><item><title>GithubActions を使い始めた</title><link>https://ozw-sei.github.io/posts/start_using_github_actions/</link><pubDate>Mon, 24 Feb 2020 17:53:05 +0900</pubDate><guid>https://ozw-sei.github.io/posts/start_using_github_actions/</guid><description>最近、仕事でGithubを使い始めた。
使い始めて便利だったものや、今後使ってみたいものをメモしていく
※ awsome みればいいじゃんって言われたら存在意義がなくなるので目をつむってくださいｗ
言語に依存するものはいくらでもあるので今回はLint系に絞っていく.
snow-actions/eclint@v1.0.1 これは何かと言うと EditorConfig に従っているかどうかをチェックする GithubAction. 例えば、チーム開発でWindowsとMacのメンバーが混在している状況では特に効果が高い.
自分は自宅ではWindowsがメインで仕事ではMacが多いのでとても助かっている （普段使いのエディタならEditorConfig勝手に読み込んでくれるんだけど、コンフリクト解消時にVimとか使ってしまうと一気に改行文字が変わってしまう事故がある）
git-hook でいいいじゃんと思う人もいると思うが、ローカルで設定が要らないのは大事
WIP WIPのものがマージされる事故が発生したので導入した。 あってはならないがあったのだ。
ReviewDog PRにコメントしてくれる犬。 マージ止めるほどじゃないけど、Lintエラーしてほしい物に対して使っている。
人がやるとその人にヘイトがたまるので良くないが犬なら許してくれる（笑）
ssh-agent まだ使ってないけど、他のPrivate Repository参照したいとき使う事になりそう。
[assignee-to-reviewer-action] (https://github.com/pullreminders/assignee-to-reviewer-action) バイク小屋対策
[lighthouse-action ] (https://github.com/jakejarvis/lighthouse-action) 実行するの忘れてるヤツを自動で動かしてくれる。文明の利器
ちなみにCircleCIのようにローカルで動かしてくれるものは無いらしい。</description></item><item><title>Hugo のテーマをカスタマイズした</title><link>https://ozw-sei.github.io/posts/customize_hugo_theme/</link><pubDate>Sun, 23 Feb 2020 23:27:57 +0900</pubDate><guid>https://ozw-sei.github.io/posts/customize_hugo_theme/</guid><description>今日からHugo使い始めて、このThemeを使用させて頂いたんだけど、早速一覧画面でタグとカテゴリーが表示したくなった。 https://github.com/niklasbuschmann/contrast-hugo?files=1
OSSなのでforkして追加してみた。 リポジトリはこちら https://github.com/ozw-sei/contrast-hugo
素直にCSSに追記してクラス追加してデザイン変更できた。
我ながらお気に入り。
参考
Pageのパラメータはここを参照した https://gohugo.io/variables/page/</description></item><item><title>Pythonのデータクラスをdictionaryからデシリアライズする書き方</title><link>https://ozw-sei.github.io/posts/python-dataclass-from-dictionary/</link><pubDate>Sun, 23 Feb 2020 22:06:17 +0900</pubDate><guid>https://ozw-sei.github.io/posts/python-dataclass-from-dictionary/</guid><description>Pythonのデータクラスをdictionaryからデシリアライズする書き方 同僚のコードレビューをしていたえときにレスポンスのdictをそのまま使っていたのだけど、 「短いコードだから辞書のままで良くない？class書くのボイラープレート多いし」と心の声が聞こえたので覚書。
Python3.7以降ならば動作するはず。
キーが足りないと動かないので注意
from dataclasses import dataclass @dataclass class Person: name: str home_town: str age: int source_dict = { &amp;quot;name&amp;quot;: &amp;quot;Mother Fxxer&amp;quot;, &amp;quot;home_town&amp;quot;: &amp;quot;Kick Ass&amp;quot;, &amp;quot;age&amp;quot;: 16 } # 普通に作る normal = Person(&amp;quot;Mother Fxxer&amp;quot;, &amp;quot;Kick Ass&amp;quot;, 16) # 辞書から作る from_dict = Person(**source_dict) print(normal == from_dict) ## おまけ # キーが足りない場合 source_dict = { } from_dict = Person(**source_dict) # Traceback (most recent call last): # File &amp;quot;qr_Z3i1cj&amp;quot;, line 27, in &amp;lt;module&amp;gt; # from_dict = Person(**source_dict) # TypeError: __init__() missing 3 required positional arguments: 'name', 'home_town', and 'age'</description></item><item><title>電子書籍の管理にGooglePlayBooksを使い始めた</title><link>https://ozw-sei.github.io/posts/started_using_googleplaybooks/</link><pubDate>Sun, 23 Feb 2020 20:50:47 +0900</pubDate><guid>https://ozw-sei.github.io/posts/started_using_googleplaybooks/</guid><description>電子書籍の管理に困っていた、具体的にはKindleで販売していない本だ。
例えば技術書展で購入した本やOreilly公式、技評Plublishingなど。
元々はOneDriveに入れて管理してたんだけど、モバイルで読んだ時にどこまで読んだか履歴の管理ができなかったり、PDFを探すのが億劫で買うだけで積ん読が増える一方だった。
GooglePlayBooksは自前の100MB以下のPDFをアップロードすることができて、モバイルでもブラウザでも開くことができる。
https://play.google.com/books
KindleのようにPC用のクライアントを必要としない所も評価が上がる（というか、Kindleより大分使いやすくないか？）
運用して1週間経過したくらいだけど、自宅でも職場でもモバイルでもストレス無く本を読むことができて満足している。
不満は強いて言えば文字検索ができないことくらい？（これは必要になったらPDF開いて検索すれば良いだろう）
とりあえず、使い続けてみる。</description></item><item><title>yasnippetのTemplateの中でElispの結果を使用したい</title><link>https://ozw-sei.github.io/posts/yasnippet-insert-current-data/</link><pubDate>Sun, 23 Feb 2020 19:07:31 +0900</pubDate><guid>https://ozw-sei.github.io/posts/yasnippet-insert-current-data/</guid><description>Hugoのヘッダー情報の日付にiso8601でDateTimeを追加するものを書いてみた。
yasnippetのスニッペット展開時に日付を一緒に挿入してほしかったのだけど、snippet中でelispの評価ができるのかがわからなかったのだけど、 ` で囲むとできるらしい。
便利
--- title: ${1:title} date: `(concat (format-time-string &amp;quot;%Y-%m-%dT%T&amp;quot;) ((lambda (x) (concat (substring x 0 3) &amp;quot;:&amp;quot; (substring x 3 5))) (format-time-string &amp;quot;%z&amp;quot;)))` draft: true --- $0 参考
Embedded Emacs-lisp code</description></item><item><title>HelloHugo</title><link>https://ozw-sei.github.io/posts/hello/</link><pubDate>Sun, 23 Feb 2020 16:16:27 +0900</pubDate><guid>https://ozw-sei.github.io/posts/hello/</guid><description>こんにちは。Hugo はてなブログにログインするためにFirefoxのCookieの設定をいじるのがアホくさくなったのと、 管理ページがおもすぎて使い物にならなかったので流行のHugoに移行しました。
おまけでgithub-actionでsource ブランチにpushすると自動でpublishするようにしました。
参考記事(Thank you!) 公式 Getting-Startd GitHub Actions による GitHub Pages への自動デプロイ</description></item><item><title>ローカル開発環境にVirtualBoxを使用する</title><link>https://ozw-sei.github.io/posts/use_virtualbox_for_local_development/</link><pubDate>Sat, 22 Feb 2020 22:37:05 +0900</pubDate><guid>https://ozw-sei.github.io/posts/use_virtualbox_for_local_development/</guid><description>経緯 DockerDesktop(Windows)、WSLとの戦いに敗れた. プロジェクト単位での仮想環境というより適当に使えるローカル開発環境が欲しかった。
やったこと VirtualBoxのインストール Debian10(Buster)のイメージのＤＬ HostOnlyNetworkの設定 1の手順 https://www.virtualbox.org/wiki/Downloads
2の手順 https://www.debian.org/distrib/
3の手順 ホストＯＳ側でホストオンリーネットワークを設定.
ゲストＯＳで下記の設定を追加
&amp;quot;/etc/systemd/network/enp0s8.network&amp;quot; というファイルを作り，次のように記入する． [Match] enp0s8 [Network] Address=192.168.151.100 DNS=192.168.151.1 sudo service networkservice restart
以上.
以下の記事を参考にしました(Thank you!!)。 https://qiita.com/Yoshiki-Takahashi/items/7274dff15dbafee5b118</description></item></channel></rss>